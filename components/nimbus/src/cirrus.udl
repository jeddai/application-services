namespace cirrus {};

enum EnrollmentChangeEventType {
    "Enrollment",
    "EnrollFailed",
    "Disqualification",
    "Unenrollment",
    "UnenrollFailed",
};

dictionary EnrollmentChangeEvent {
    string experiment_slug;
    string branch_slug;
    string enrollment_id;
    string? reason;
    EnrollmentChangeEventType change;
};

dictionary EnrollmentResponse {
    record<DOMString, JsonObject> enrolled_feature_config_map;
    JsonArray enrollments;
    sequence<EnrollmentChangeEvent> events;
};

dictionary EnrollmentRequest {
    string? client_id;
    JsonObject app_context;
    JsonObject request_context;
    boolean is_user_participating = true;
    JsonArray next_experiments;
    JsonArray prev_enrollments;
};

[Error]
enum NimbusError {
    "InvalidPersistedData", "IOError",
    "JSONError", "EvaluationError", "InvalidExpression", "InvalidFraction",
    "TryFromSliceError", "EmptyRatiosError", "OutOfBoundsError","UrlParsingError",
    "UuidError", "InvalidExperimentFormat",
    "InvalidPath", "InternalError", "NoSuchExperiment", "NoSuchBranch",
    "DatabaseNotReady", "VersionParsingError", "TryFromIntError",
    "ParseIntError", "TransformParameterError", "CirrusError"
};

[Custom]
typedef string JsonObject;

[Custom]
typedef string JsonArray;

interface CirrusClient {
    constructor();

    // Handles an enrollment request and returns an enrollment response.
    [Throws=NimbusError]
    JsonObject handle_enrollment(JsonObject request);
};